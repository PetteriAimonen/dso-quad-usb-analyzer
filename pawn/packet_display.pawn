/// Scrollable list of packets.

static selected_index = 0;

/// Background and foreground colors for each packet type
static const Color: packetcolors[][] = [
    [red, black],               // PT_INVALID
    [RGB(128, 64, 0), white],   // PT_OUT
    [black, green],             // PT_ACK
    [black, white],             // PT_DATA0
    [black, white],             // PT_PING, not USB1.1
    [gray, black],              // PT_SOF
    [black, white],             // PT_NYET, not USB1.1
    [black, white],             // PT_DATA2, not USB1.1
    [black, white],             // PT_SPLIT, not USB1.1
    [darkgreen, white],         // PT_IN
    [black, red],               // PT_NAK
    [black, white],             // PT_DATA1
    [gray, black],              // PT_PRE
    [darkblue, white],          // PT_SETUP
    [black, red],               // PT_STALL
    [black, white],             // PT_MDATA, not USB1.1
    [red, white]                // PT_RESET
];

static row_cache[16]{50};
static row_indices[16] = [-1, ...];

display_reset()
{
    for (new i = 0; i < 16; i++)
        row_indices[i] = -1;
}

/// Re-render given row of display (0 to 14)
display_render_row(row)
{
    new top_index = selected_index - 7;
    if (top_index < 0) top_index = 0;
    
    new index = top_index + row;
    new y = 206 - row * fontheight;
    
    if (!packet_valid(index))
    {
        fill_rectangle(0, y, screenwidth, fontheight, black);
        return;
    }
    
    new packettype: type = analyze_packet_type(index);
    new Color: bgcolor = packetcolors[type][0];
    new Color: fgcolor = packetcolors[type][1];
    
    new cacheidx = index & 15;
    if (row_indices[cacheidx] != index)
    {
        analyze_oneline(index, row_cache[cacheidx]);
        strrpad(row_cache[cacheidx], 50);
        row_indices[cacheidx] = index;
    }
    
    if (index == selected_index)
    {
        bgcolor = blend(bgcolor, white, FIX(0.3));
        fgcolor = blend(fgcolor, white, FIX(0.3));
    }
    
    draw_text(row_cache[cacheidx], 0, y, fgcolor, bgcolor);
}

display_redraw()
{
    if (!packet_valid(selected_index))
        selected_index = packet_get_oldest();
    
    if (selected_index < 0)
    {
        fill_rectangle(0, 0, screenwidth, 220, black);
        draw_text("Ready to capture some USB packets!", 200, 160, white, black, true);
        draw_text("Channel A = D-, Channel B = D+", 200, 140, white, black, true);
        return;
    }
    
    for (new i = 0; i < 15; i++)
    {
        display_render_row(i);
    }
}

@scroll1(delta)
{
    if (delta > 0 && packet_valid(selected_index + 15))
    {
        selected_index += 15;
    }
    else if (delta < 0 && packet_valid(selected_index - 15))
    {
        selected_index -= 15;
    }
    
    display_redraw();
}

@scroll2(delta)
{
    if (delta > 0 && packet_valid(selected_index + 1))
    {
        selected_index++;
    }
    else if (delta < 0 && packet_valid(selected_index - 1))
    {
        selected_index--;
    }
    else if (delta == 0)
    {
        // Scroller click
        details_show(selected_index);
    }
    
    display_redraw();
}
